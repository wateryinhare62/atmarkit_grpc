//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bookinfo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Bookinfo_MultiBookInfoClient`, then call methods of this protocol to make API calls.
internal protocol Bookinfo_MultiBookInfoClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? { get }

  func search(
    _ request: Bookinfo_SearchRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bookinfo_SearchResponse) -> Void
  ) -> ServerStreamingCall<Bookinfo_SearchRequest, Bookinfo_SearchResponse>
}

extension Bookinfo_MultiBookInfoClientProtocol {
  internal var serviceName: String {
    return "bookinfo.MultiBookInfo"
  }

  /// Server streaming call to Search
  ///
  /// - Parameters:
  ///   - request: Request to send to Search.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func search(
    _ request: Bookinfo_SearchRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bookinfo_SearchResponse) -> Void
  ) -> ServerStreamingCall<Bookinfo_SearchRequest, Bookinfo_SearchResponse> {
    return self.makeServerStreamingCall(
      path: Bookinfo_MultiBookInfoClientMetadata.Methods.search.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Bookinfo_MultiBookInfoClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Bookinfo_MultiBookInfoNIOClient")
internal final class Bookinfo_MultiBookInfoClient: Bookinfo_MultiBookInfoClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bookinfo.MultiBookInfo service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Bookinfo_MultiBookInfoNIOClient: Bookinfo_MultiBookInfoClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol?

  /// Creates a client for the bookinfo.MultiBookInfo service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bookinfo_MultiBookInfoAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? { get }

  func makeSearchCall(
    _ request: Bookinfo_SearchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Bookinfo_SearchRequest, Bookinfo_SearchResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bookinfo_MultiBookInfoAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bookinfo_MultiBookInfoClientMetadata.serviceDescriptor
  }

  internal var interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSearchCall(
    _ request: Bookinfo_SearchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Bookinfo_SearchRequest, Bookinfo_SearchResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Bookinfo_MultiBookInfoClientMetadata.Methods.search.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bookinfo_MultiBookInfoAsyncClientProtocol {
  internal func search(
    _ request: Bookinfo_SearchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Bookinfo_SearchResponse> {
    return self.performAsyncServerStreamingCall(
      path: Bookinfo_MultiBookInfoClientMetadata.Methods.search.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Bookinfo_MultiBookInfoAsyncClient: Bookinfo_MultiBookInfoAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Bookinfo_MultiBookInfoClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'search'.
  func makeSearchInterceptors() -> [ClientInterceptor<Bookinfo_SearchRequest, Bookinfo_SearchResponse>]
}

internal enum Bookinfo_MultiBookInfoClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MultiBookInfo",
    fullName: "bookinfo.MultiBookInfo",
    methods: [
      Bookinfo_MultiBookInfoClientMetadata.Methods.search,
    ]
  )

  internal enum Methods {
    internal static let search = GRPCMethodDescriptor(
      name: "Search",
      path: "/bookinfo.MultiBookInfo/Search",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Bookinfo_MultiBookInfoProvider: CallHandlerProvider {
  var interceptors: Bookinfo_MultiBookInfoServerInterceptorFactoryProtocol? { get }

  func search(request: Bookinfo_SearchRequest, context: StreamingResponseCallContext<Bookinfo_SearchResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Bookinfo_MultiBookInfoProvider {
  internal var serviceName: Substring {
    return Bookinfo_MultiBookInfoServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Search":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookinfo_SearchRequest>(),
        responseSerializer: ProtobufSerializer<Bookinfo_SearchResponse>(),
        interceptors: self.interceptors?.makeSearchInterceptors() ?? [],
        userFunction: self.search(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bookinfo_MultiBookInfoAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bookinfo_MultiBookInfoServerInterceptorFactoryProtocol? { get }

  @Sendable func search(
    request: Bookinfo_SearchRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Bookinfo_SearchResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bookinfo_MultiBookInfoAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bookinfo_MultiBookInfoServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Bookinfo_MultiBookInfoServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Bookinfo_MultiBookInfoServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Search":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookinfo_SearchRequest>(),
        responseSerializer: ProtobufSerializer<Bookinfo_SearchResponse>(),
        interceptors: self.interceptors?.makeSearchInterceptors() ?? [],
        wrapping: self.search(request:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Bookinfo_MultiBookInfoServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'search'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSearchInterceptors() -> [ServerInterceptor<Bookinfo_SearchRequest, Bookinfo_SearchResponse>]
}

internal enum Bookinfo_MultiBookInfoServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MultiBookInfo",
    fullName: "bookinfo.MultiBookInfo",
    methods: [
      Bookinfo_MultiBookInfoServerMetadata.Methods.search,
    ]
  )

  internal enum Methods {
    internal static let search = GRPCMethodDescriptor(
      name: "Search",
      path: "/bookinfo.MultiBookInfo/Search",
      type: GRPCCallType.serverStreaming
    )
  }
}
